generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  passwordHash  String?   @map("password_hash")
  role          Role      @default(CLIENT)
  createdAt     DateTime  @default(now()) @map("created_at")
  orgId         String?   @map("org_id")
  
  accounts Account[]
  sessions Session[]
  org      Org?      @relation(fields: [orgId], references: [id])

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum Role {
  CLIENT
  ADMIN
}

model Org {
  id           String    @id @default(cuid())
  name         String
  industry     String?
  city         String?
  state        String?
  country      String?
  createdAt    DateTime  @default(now()) @map("created_at")
  plan         Plan      @default(BASIC)
  trialEndsAt  DateTime? @map("trial_ends_at")
  onboardedAt  DateTime? @map("onboarded_at")
  
  users      User[]
  leads      Lead[]
  campaigns  Campaign[]
  kpiDaily   KpiDaily[] @relation("OrgKpiDaily")

  @@map("orgs")
}

enum Plan {
  BASIC
  PREMIUM
}

model Lead {
  id         String     @id @default(cuid())
  orgId      String     @map("org_id")
  name       String
  clinic     String?
  city       String?
  source     String?
  status     LeadStatus @default(NEW)
  lastTouch  DateTime?  @map("last_touch")
  createdAt  DateTime   @default(now()) @map("created_at")
  
  org Org @relation(fields: [orgId], references: [id])

  @@map("leads")
}

enum LeadStatus {
  NEW
  QUALIFIED
  BOOKED
  SHOWED
  CLOSED
  LOST
}

model Campaign {
  id        String   @id @default(cuid())
  orgId     String   @map("org_id")
  name      String
  channel   String   @default("email")
  replyRate Float    @default(0) @map("reply_rate")
  opens     Int      @default(0)
  sends     Int      @default(0)
  replies   Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  
  org Org @relation(fields: [orgId], references: [id])

  @@map("campaigns")
}

model KpiDaily {
  id              String   @id @default(cuid())
  orgId           String   @map("org_id")
  date            DateTime
  leads           Int      @default(0)
  positiveReplies Int      @default(0) @map("positive_replies")
  qualified       Int      @default(0)
  booked          Int      @default(0)
  showed          Int      @default(0)
  closed          Int      @default(0)
  
  org Org @relation("OrgKpiDaily", fields: [orgId], references: [id])

  @@unique([orgId, date])
  @@map("kpi_daily")
}