{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient();\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;"],"names":[],"mappings":";;;;;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,uDAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 14, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 19, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/lib/auth.ts"],"sourcesContent":["import { DefaultSession, NextAuthOptions, Session } from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport { PrismaAdapter } from \"@auth/prisma-adapter\";\nimport { prisma } from \"@/lib/prisma\";\nimport bcrypt from \"bcryptjs\";\n\nexport const authOptions: NextAuthOptions = {\n  adapter: PrismaAdapter(prisma) as any,\n  session: {\n    strategy: \"jwt\",\n  },\n  providers: [\n    CredentialsProvider({\n      name: \"credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          return null;\n        }\n\n        const user = await prisma.user.findUnique({\n          where: {\n            email: credentials.email,\n          },\n        });\n\n        if (!user || !user.passwordHash) {\n          return null;\n        }\n\n        const isPasswordValid = await bcrypt.compare(\n          credentials.password,\n          user.passwordHash\n        );\n\n        if (!isPasswordValid) {\n          return null;\n        }\n\n        return {\n          id: user.id,\n          email: user.email,\n          name: user.name,\n          image: user.image || undefined,\n          role: user.role,\n        };\n      },\n    }),\n  ],\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id;\n        token.role = user.role;\n        // Make sure we have all required fields\n        if (!token.id || !token.role) {\n          console.error('Missing required token fields:', { token, user });\n        }\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (!session.user) {\n        console.error('No user in session object');\n        return session;\n      }\n\n      // Ensure we have all required fields from token\n      if (!token.id || !token.role) {\n        console.error('Missing required token fields:', { \n          tokenId: !!token.id,\n          tokenRole: !!token.role,\n          tokenKeys: Object.keys(token)\n        });\n        return session;\n      }\n\n      // Create a new session object with the correct type\n      const updatedSession = {\n        ...session,\n        user: {\n          ...session.user,\n          id: token.id as string,\n          role: token.role as string\n        }\n      };\n      \n      try {\n        // Fetch the latest user data with org\n        const dbUser = await prisma.user.findUnique({\n          where: { id: token.id as string },\n          include: { \n            org: {\n              select: { \n                id: true,\n                name: true \n              }\n            } \n          }\n        });\n        \n        if (dbUser) {\n          // Ensure we have a valid role\n          const userRole = dbUser.role || 'USER';\n          \n          // Update the session user with all required fields\n          updatedSession.user = {\n            ...updatedSession.user,\n            id: dbUser.id,\n            email: dbUser.email || null,\n            name: dbUser.name || null,\n            role: userRole,\n            orgId: dbUser.org?.id || null,\n            orgName: dbUser.org?.name || null\n          };\n          \n          // Add role to token for future requests\n          token.role = userRole;\n        } else {\n          console.error('User not found in database:', token.id);\n        }\n      } catch (error) {\n        console.error('Error fetching user data in session callback:', error);\n        // Return the session with token data if DB fetch fails\n      }\n      \n      return updatedSession;\n    },\n  },\n  pages: {\n    signIn: \"/login\",\n  },\n};"],"names":[],"mappings":"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"}},
    {"offset": {"line": 157, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/api/dashboard/summary/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth\";\nimport { authOptions } from \"../../../../lib/auth\";\nimport { prisma } from \"../../../../lib/prisma\";\nimport { subDays, format } from \"date-fns\";\n\nexport async function GET(request: NextRequest) {\n  console.log('Dashboard summary API called');\n  const session = await getServerSession(authOptions);\n  console.log('Session in API:', JSON.stringify(session, null, 2));\n\n  if (!session) {\n    console.error('No session found');\n    return NextResponse.json({ message: \"No session found\" }, { status: 401 });\n  }\n\n  if (!session.user?.orgId) {\n    console.error('No orgId in session. User data:', JSON.stringify(session.user, null, 2));\n    return NextResponse.json({ message: \"Organization ID not found in session\" }, { status: 401 });\n  }\n\n  try {\n    const { searchParams } = new URL(request.url);\n    const days = parseInt(searchParams.get(\"days\") || \"30\");\n    const startDate = subDays(new Date(), days);\n\n    // Get KPIs for the date range\n    const kpiData = await prisma.kpiDaily.findMany({\n      where: {\n        orgId: session.user.orgId,\n        date: {\n          gte: startDate,\n        },\n      },\n      orderBy: { date: \"desc\" },\n    });\n\n    const kpis = kpiData.reduce(\n      (acc, day) => ({\n        newLeads: acc.newLeads + day.leads,\n        positiveReplies: acc.positiveReplies + day.positiveReplies,\n        qualified: acc.qualified + day.qualified,\n        booked: acc.booked + day.booked,\n        showed: acc.showed + day.showed,\n        closed: acc.closed + day.closed,\n      }),\n      { newLeads: 0, positiveReplies: 0, qualified: 0, booked: 0, showed: 0, closed: 0 }\n    );\n\n    // Chart data - leads by day\n    const leadsByDay = kpiData\n      .reverse()\n      .map((day) => ({\n        date: format(day.date, \"MMM dd\"),\n        leads: day.leads,\n      }));\n\n    // Pipeline funnel data\n    const pipelineFunnel = [\n      { stage: \"Lead\", count: kpis.newLeads, color: \"#3b82f6\" },\n      { stage: \"Qualified\", count: kpis.qualified, color: \"#8b5cf6\" },\n      { stage: \"Booked\", count: kpis.booked, color: \"#f59e0b\" },\n      { stage: \"Showed\", count: kpis.showed, color: \"#06b6d4\" },\n      { stage: \"Closed\", count: kpis.closed, color: \"#10b981\" },\n    ];\n\n    // Latest leads\n    const latestLeads = await prisma.lead.findMany({\n      where: { orgId: session.user.orgId },\n      orderBy: { createdAt: \"desc\" },\n      take: 10,\n      select: {\n        id: true,\n        name: true,\n        clinic: true,\n        city: true,\n        source: true,\n        status: true,\n        lastTouch: true,\n      },\n    });\n\n    // Campaign performance\n    const campaigns = await prisma.campaign.findMany({\n      where: { orgId: session.user.orgId },\n      select: {\n        name: true,\n        sends: true,\n        opens: true,\n        replies: true,\n        replyRate: true,\n      },\n    });\n\n    // Growth since registration\n    const org = await prisma.org.findUnique({\n      where: { id: session.user.orgId },\n      select: { createdAt: true },\n    });\n\n    // Calculate baseline (first week after registration)\n    const registrationDate = org?.createdAt || new Date();\n    const baselineEnd = new Date(registrationDate);\n    baselineEnd.setDate(baselineEnd.getDate() + 7);\n\n    const baselineKpis = await prisma.kpiDaily.findMany({\n      where: {\n        orgId: session.user.orgId,\n        date: {\n          gte: registrationDate,\n          lte: baselineEnd,\n        },\n      },\n    });\n\n    const baselineLeads = baselineKpis.reduce((sum, day) => sum + day.leads, 0);\n    const baselineClosed = baselineKpis.reduce((sum, day) => sum + day.closed, 0);\n\n    const currentLeads = kpis.newLeads;\n    const currentClosed = kpis.closed;\n\n    const growthSinceRegistration = {\n      leadsGrowth: {\n        current: currentLeads,\n        baseline: baselineLeads,\n        percentage: baselineLeads > 0 ? ((currentLeads - baselineLeads) / baselineLeads * 100) : 0,\n      },\n      clientsGrowth: {\n        current: currentClosed,\n        baseline: baselineClosed,\n        percentage: baselineClosed > 0 ? ((currentClosed - baselineClosed) / baselineClosed * 100) : 0,\n      },\n    };\n\n    return NextResponse.json({\n      kpis,\n      chartSeries: {\n        leadsByDay,\n        callsByWeek: [], // Placeholder\n        replyRateByCampaign: campaigns.map(c => ({ campaign: c.name, rate: c.replyRate })),\n        pipelineFunnel,\n      },\n      tables: {\n        latestLeads: latestLeads.map(lead => ({\n          ...lead,\n          lastTouch: lead.lastTouch ? format(lead.lastTouch, \"MMM dd\") : \"Never\",\n        })),\n        campaignPerformance: campaigns,\n      },\n      growthSinceRegistration,\n    });\n\n  } catch (error) {\n    console.error(\"Dashboard summary error:\", error);\n    return NextResponse.json(\n      { message: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 360, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}