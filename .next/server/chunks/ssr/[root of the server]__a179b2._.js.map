{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["/turbopack/[next]/internal/font/google/inter_59dee874.module.css [app-rsc] (css module)"],"sourcesContent":["__turbopack_export_value__({\n  \"className\": \"inter_59dee874-module__9CtR0q__className\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA"}},
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12, "column": 0}, "map": {"version":3,"sources":["/turbopack/[next]/internal/font/google/inter_59dee874.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22layout.tsx%22,%22import%22:%22Inter%22,%22arguments%22:[{%22subsets%22:[%22latin%22]}],%22variableName%22:%22inter%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'__Inter_59dee8', '__Inter_Fallback_59dee8'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;;;;AACA,MAAM,WAAW;IACb,WAAW,qJAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,WAAW;IAEf;AACJ;AAEA,IAAI,qJAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,qJAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe"}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 34, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/NavBar.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/components/NavBar.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/NavBar.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;;;;uCACe,CAAA,GAAA,+PAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqQ,GAClS,mCACA"}},
    {"offset": {"line": 43, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 48, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/Footer.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/components/Footer.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/Footer.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;;;;uCACe,CAAA,GAAA,+PAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqQ,GAClS,mCACA"}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/providers.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/providers.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/providers.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;;;;uCACe,CAAA,GAAA,+PAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAiQ,GAC9R,+BACA"}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 101, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/layout.tsx"],"sourcesContent":["import type { Metadata } from \"next\";\nimport { Inter } from \"next/font/google\";\nimport \"./globals.css\";\nimport NavBar from \"../components/NavBar\";\nimport Footer from \"../components/Footer\";\nimport Providers from \"./providers\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata: Metadata = {\n  title: \"Hosvi - Get More Clients with Our 30-Day Free Trial\",\n  description:\n    \"Complete lead generation system for chiropractors and med spas in Florida. Outbound email, CRM tracking, booking pages, and more.\",\n  keywords:\n    \"chiropractic marketing, med spa marketing, lead generation, Florida\",\n};\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\" className=\"h-full\">\n      <body className={`${inter.className} flex flex-col min-h-screen`}>\n        <a\n          href=\"#main\"\n          className=\"sr-only focus:not-sr-only focus:fixed focus:top-4 focus:left-4 focus:z-[100] bg-white text-slate-900 px-4 py-2 rounded-lg shadow\"\n        >\n          Skip to content\n        </a>\n        <Providers>\n          <NavBar />\n          <main\n            id=\"main\"\n            className=\"flex-grow relative min-h-[calc(100vh-4rem)]\"\n          >\n            {children}\n          </main>\n          <Footer />\n        </Providers>\n      </body>\n    </html>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;AASO,MAAM,WAAqB;IAChC,OAAO;IACP,aACE;IACF,UACE;AACJ;AAEe,SAAS,WAAW,EACjC,QAAQ,EAGT;IACC,qBACE,wPAAC;QAAK,MAAK;QAAK,WAAU;kBACxB,cAAA,wPAAC;YAAK,WAAW,CAAC,EAAE,yIAAA,CAAA,UAAK,CAAC,SAAS,CAAC,2BAA2B,CAAC;;8BAC9D,wPAAC;oBACC,MAAK;oBACL,WAAU;8BACX;;;;;;8BAGD,wPAAC,iHAAA,CAAA,UAAS;;sCACR,wPAAC,qHAAA,CAAA,UAAM;;;;;sCACP,wPAAC;4BACC,IAAG;4BACH,WAAU;sCAET;;;;;;sCAEH,wPAAC,qHAAA,CAAA,UAAM;;;;;;;;;;;;;;;;;;;;;;AAKjB"}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 194, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient();\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;"],"names":[],"mappings":";;;;;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,uDAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 203, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 208, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/lib/auth.ts"],"sourcesContent":["import { DefaultSession, NextAuthOptions } from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport { PrismaAdapter } from \"@auth/prisma-adapter\";\nimport { prisma } from \"@/lib/prisma\";\nimport bcrypt from \"bcryptjs\";\n\nexport const authOptions: NextAuthOptions = {\n  adapter: PrismaAdapter(prisma) as any,\n  session: {\n    strategy: \"jwt\",\n  },\n  providers: [\n    CredentialsProvider({\n      name: \"credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          return null;\n        }\n\n        const user = await prisma.user.findUnique({\n          where: {\n            email: credentials.email,\n          },\n        });\n\n        if (!user || !user.passwordHash) {\n          return null;\n        }\n\n        const isPasswordValid = await bcrypt.compare(\n          credentials.password,\n          user.passwordHash\n        );\n\n        if (!isPasswordValid) {\n          return null;\n        }\n\n        return {\n          id: user.id,\n          email: user.email,\n          name: user.name,\n          image: user.image || undefined,\n          role: user.role,\n        };\n      },\n    }),\n  ],\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id;\n        token.role = user.role;\n        // Make sure we have all required fields\n        if (!token.id || !token.role) {\n          console.error('Missing required token fields:', { token, user });\n        }\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (session.user) {\n        // Ensure we have all required fields from token\n        if (!token.id || !token.role) {\n          console.error('Missing required token fields:', { token });\n          return session;\n        }\n\n        session.user.id = token.id;\n        session.user.role = token.role;\n        \n        try {\n          // Fetch the latest user data with org\n          const dbUser = await prisma.user.findUnique({\n            where: { id: token.id },\n            include: { \n              org: {\n                select: { id: true }\n              } \n            }\n          });\n          \n          if (dbUser) {\n            // Update the session user with all required fields\n            session.user = {\n              id: dbUser.id,\n              email: dbUser.email || null, // Match the expected type\n              name: dbUser.name || null,\n              role: dbUser.role || 'USER',\n              orgId: dbUser.org?.id || null\n            };\n          }\n        } catch (error) {\n          console.error('Error fetching user data in session callback:', error);\n          // Don't fail the session - use token data\n        }\n      }\n      return session;\n    },\n  },\n  pages: {\n    signIn: \"/login\",\n  },\n};"],"names":[],"mappings":";;;;;;;;;;;;AAMO,MAAM,cAA+B;IAC1C,SAAS,CAAA,GAAA,oJAAA,CAAA,gBAAa,AAAD,EAAE,6GAAA,CAAA,SAAM;IAC7B,SAAS;QACP,UAAU;IACZ;IACA,WAAW;QACT,CAAA,GAAA,wJAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,OAAO;gBACT;gBAEA,MAAM,OAAO,MAAM,6GAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBACxC,OAAO;wBACL,OAAO,YAAY,KAAK;oBAC1B;gBACF;gBAEA,IAAI,CAAC,QAAQ,CAAC,KAAK,YAAY,EAAE;oBAC/B,OAAO;gBACT;gBAEA,MAAM,kBAAkB,MAAM,2CAAA,CAAA,UAAM,CAAC,OAAO,CAC1C,YAAY,QAAQ,EACpB,KAAK,YAAY;gBAGnB,IAAI,CAAC,iBAAiB;oBACpB,OAAO;gBACT;gBAEA,OAAO;oBACL,IAAI,KAAK,EAAE;oBACX,OAAO,KAAK,KAAK;oBACjB,MAAM,KAAK,IAAI;oBACf,OAAO,KAAK,KAAK,IAAI;oBACrB,MAAM,KAAK,IAAI;gBACjB;YACF;QACF;KACD;IACD,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,IAAI,GAAG,KAAK,IAAI;gBACtB,wCAAwC;gBACxC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,IAAI,EAAE;oBAC5B,QAAQ,KAAK,CAAC,kCAAkC;wBAAE;wBAAO;oBAAK;gBAChE;YACF;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,QAAQ,IAAI,EAAE;gBAChB,gDAAgD;gBAChD,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,IAAI,EAAE;oBAC5B,QAAQ,KAAK,CAAC,kCAAkC;wBAAE;oBAAM;oBACxD,OAAO;gBACT;gBAEA,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;gBAC1B,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;gBAE9B,IAAI;oBACF,sCAAsC;oBACtC,MAAM,SAAS,MAAM,6GAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;wBAC1C,OAAO;4BAAE,IAAI,MAAM,EAAE;wBAAC;wBACtB,SAAS;4BACP,KAAK;gCACH,QAAQ;oCAAE,IAAI;gCAAK;4BACrB;wBACF;oBACF;oBAEA,IAAI,QAAQ;wBACV,mDAAmD;wBACnD,QAAQ,IAAI,GAAG;4BACb,IAAI,OAAO,EAAE;4BACb,OAAO,OAAO,KAAK,IAAI;4BACvB,MAAM,OAAO,IAAI,IAAI;4BACrB,MAAM,OAAO,IAAI,IAAI;4BACrB,OAAO,OAAO,GAAG,EAAE,MAAM;wBAC3B;oBACF;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,iDAAiD;gBAC/D,0CAA0C;gBAC5C;YACF;YACA,OAAO;QACT;IACF;IACA,OAAO;QACL,QAAQ;IACV;AACF"}},
    {"offset": {"line": 326, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 331, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 336, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 341, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/dashboard/page.tsx"],"sourcesContent":["import { getServerSession } from \"next-auth\";\nimport { redirect } from \"next/navigation\";\nimport { authOptions } from \"../../lib/auth\";\nimport { prisma } from \"../../lib/prisma\";\nimport DashboardClient from \"../../components/DashboardClient\";\n\nexport default async function DashboardPage() {\n  console.log('Rendering DashboardPage...');\n  const session = await getServerSession(authOptions);\n  console.log('Session in dashboard page:', {\n    hasSession: !!session,\n    hasUser: !!session?.user,\n    userId: session?.user?.id,\n    userRole: session?.user?.role,\n    orgId: (session?.user as any)?.orgId\n  });\n\n  if (!session?.user?.id) {\n    console.log('No session or user ID, redirecting to login');\n    redirect(\"/login\");\n  }\n\n  console.log('User role:', session.user.role);\n  if (session.user.role !== \"CLIENT\") {\n    console.log('User is not a client, redirecting to admin');\n    redirect(\"/admin\");\n  }\n\n  try {\n    // Fetch user's org data with error handling\n    console.log('Fetching user with org data for ID:', session.user.id);\n    const user = await prisma.user.findUnique({\n      where: { \n        id: session.user.id \n      },\n      include: { \n        org: true \n      },\n    });\n\n    console.log('User data from database:', JSON.stringify(user, null, 2));\n\n    if (!user) {\n      console.error('User not found in database');\n      redirect(\"/login\");\n    }\n\n    if (!user.org) {\n      console.log('User has no org, redirecting to trial');\n      redirect(\"/trial\");\n    }\n\n    console.log('Rendering DashboardClient with org:', user.org);\n    return <DashboardClient org={user.org} />;\n  } catch (error) {\n    console.error('Error fetching user data:', error);\n    redirect(\"/login\");\n  }\n}"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAMe,eAAe;IAC5B,QAAQ,GAAG,CAAC;IACZ,MAAM,UAAU,MAAM,CAAA,GAAA,qIAAA,CAAA,mBAAgB,AAAD,EAAE,2GAAA,CAAA,cAAW;IAClD,QAAQ,GAAG,CAAC,8BAA8B;QACxC,YAAY,CAAC,CAAC;QACd,SAAS,CAAC,CAAC,SAAS;QACpB,QAAQ,SAAS,MAAM;QACvB,UAAU,SAAS,MAAM;QACzB,OAAQ,SAAS,MAAc;IACjC;IAEA,IAAI,CAAC,SAAS,MAAM,IAAI;QACtB,QAAQ,GAAG,CAAC;QACZ,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;IACX;IAEA,QAAQ,GAAG,CAAC,cAAc,QAAQ,IAAI,CAAC,IAAI;IAC3C,IAAI,QAAQ,IAAI,CAAC,IAAI,KAAK,UAAU;QAClC,QAAQ,GAAG,CAAC;QACZ,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;IACX;IAEA,IAAI;QACF,4CAA4C;QAC5C,QAAQ,GAAG,CAAC,uCAAuC,QAAQ,IAAI,CAAC,EAAE;QAClE,MAAM,OAAO,MAAM,6GAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACxC,OAAO;gBACL,IAAI,QAAQ,IAAI,CAAC,EAAE;YACrB;YACA,SAAS;gBACP,KAAK;YACP;QACF;QAEA,QAAQ,GAAG,CAAC,4BAA4B,KAAK,SAAS,CAAC,MAAM,MAAM;QAEnE,IAAI,CAAC,MAAM;YACT,QAAQ,KAAK,CAAC;YACd,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;QACX;QAEA,IAAI,CAAC,KAAK,GAAG,EAAE;YACb,QAAQ,GAAG,CAAC;YACZ,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;QACX;QAEA,QAAQ,GAAG,CAAC,uCAAuC,KAAK,GAAG;QAC3D,qBAAO,wPAAC,8HAAA,CAAA,UAAe;YAAC,KAAK,KAAK,GAAG;;;;;;IACvC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;IACX;AACF"}},
    {"offset": {"line": 410, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 421, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/.next-internal/server/app/dashboard/page/actions.js"],"sourcesContent":["__turbopack_export_value__({\n});"],"names":[],"mappings":"AAAA,2BAA2B,CAC3B"}},
    {"offset": {"line": 422, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}