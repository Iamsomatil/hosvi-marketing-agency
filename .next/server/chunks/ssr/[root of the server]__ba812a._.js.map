{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["/turbopack/[next]/internal/font/google/inter_59dee874.module.css [app-rsc] (css module)"],"sourcesContent":["__turbopack_export_value__({\n  \"className\": \"inter_59dee874-module__9CtR0q__className\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA"}},
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12, "column": 0}, "map": {"version":3,"sources":["/turbopack/[next]/internal/font/google/inter_59dee874.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22layout.tsx%22,%22import%22:%22Inter%22,%22arguments%22:[{%22subsets%22:[%22latin%22]}],%22variableName%22:%22inter%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'__Inter_59dee8', '__Inter_Fallback_59dee8'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;;;;AACA,MAAM,WAAW;IACb,WAAW,qJAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,WAAW;IAEf;AACJ;AAEA,IAAI,qJAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,qJAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe"}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 34, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/NavBar.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/components/NavBar.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/NavBar.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;;;;uCACe,CAAA,GAAA,+PAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqQ,GAClS,mCACA"}},
    {"offset": {"line": 43, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 48, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/Footer.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/components/Footer.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/Footer.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;;;;uCACe,CAAA,GAAA,+PAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqQ,GAClS,mCACA"}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/providers.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/providers.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/providers.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;;;;uCACe,CAAA,GAAA,+PAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAiQ,GAC9R,+BACA"}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 101, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/layout.tsx"],"sourcesContent":["import type { Metadata } from \"next\";\nimport { Inter } from \"next/font/google\";\nimport \"./globals.css\";\nimport NavBar from \"../components/NavBar\";\nimport Footer from \"../components/Footer\";\nimport Providers from \"./providers\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata: Metadata = {\n  title: \"Hosvi - Get More Clients with Our 30-Day Free Trial\",\n  description:\n    \"Complete lead generation system for chiropractors and med spas in Florida. Outbound email, CRM tracking, booking pages, and more.\",\n  keywords:\n    \"chiropractic marketing, med spa marketing, lead generation, Florida\",\n};\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\" className=\"h-full\">\n      <body className={`${inter.className} flex flex-col min-h-screen`}>\n        <a\n          href=\"#main\"\n          className=\"sr-only focus:not-sr-only focus:fixed focus:top-4 focus:left-4 focus:z-[100] bg-white text-slate-900 px-4 py-2 rounded-lg shadow\"\n        >\n          Skip to content\n        </a>\n        <Providers>\n          <NavBar />\n          <main\n            id=\"main\"\n            className=\"flex-grow relative min-h-[calc(100vh-4rem)]\"\n          >\n            {children}\n          </main>\n          <Footer />\n        </Providers>\n      </body>\n    </html>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;AASO,MAAM,WAAqB;IAChC,OAAO;IACP,aACE;IACF,UACE;AACJ;AAEe,SAAS,WAAW,EACjC,QAAQ,EAGT;IACC,qBACE,wPAAC;QAAK,MAAK;QAAK,WAAU;kBACxB,cAAA,wPAAC;YAAK,WAAW,CAAC,EAAE,yIAAA,CAAA,UAAK,CAAC,SAAS,CAAC,2BAA2B,CAAC;;8BAC9D,wPAAC;oBACC,MAAK;oBACL,WAAU;8BACX;;;;;;8BAGD,wPAAC,iHAAA,CAAA,UAAS;;sCACR,wPAAC,qHAAA,CAAA,UAAM;;;;;sCACP,wPAAC;4BACC,IAAG;4BACH,WAAU;sCAET;;;;;;sCAEH,wPAAC,qHAAA,CAAA,UAAM;;;;;;;;;;;;;;;;;;;;;;AAKjB"}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 194, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient();\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;"],"names":[],"mappings":";;;;;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,uDAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 203, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 208, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/lib/auth.ts"],"sourcesContent":["import { DefaultSession, NextAuthOptions, Session } from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport { PrismaAdapter } from \"@auth/prisma-adapter\";\nimport { prisma } from \"@/lib/prisma\";\nimport bcrypt from \"bcryptjs\";\n\nexport const authOptions: NextAuthOptions = {\n  adapter: PrismaAdapter(prisma) as any,\n  session: {\n    strategy: \"jwt\",\n  },\n  providers: [\n    CredentialsProvider({\n      name: \"credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          return null;\n        }\n\n        const user = await prisma.user.findUnique({\n          where: {\n            email: credentials.email,\n          },\n        });\n\n        if (!user || !user.passwordHash) {\n          return null;\n        }\n\n        const isPasswordValid = await bcrypt.compare(\n          credentials.password,\n          user.passwordHash\n        );\n\n        if (!isPasswordValid) {\n          return null;\n        }\n\n        return {\n          id: user.id,\n          email: user.email,\n          name: user.name,\n          image: user.image || undefined,\n          role: user.role,\n        };\n      },\n    }),\n  ],\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id;\n        token.role = user.role;\n        // Make sure we have all required fields\n        if (!token.id || !token.role) {\n          console.error('Missing required token fields:', { token, user });\n        }\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (!session.user) {\n        console.error('No user in session object');\n        return session;\n      }\n\n      // Ensure we have all required fields from token\n      if (!token.id || !token.role) {\n        console.error('Missing required token fields:', { \n          tokenId: !!token.id,\n          tokenRole: !!token.role,\n          tokenKeys: Object.keys(token)\n        });\n        return session;\n      }\n\n      // Create a new session object with the correct type\n      const updatedSession = {\n        ...session,\n        user: {\n          ...session.user,\n          id: token.id as string,\n          role: token.role as string\n        }\n      };\n      \n      try {\n        // Fetch the latest user data with org\n        const dbUser = await prisma.user.findUnique({\n          where: { id: token.id as string },\n          include: { \n            org: {\n              select: { \n                id: true,\n                name: true \n              }\n            } \n          }\n        });\n        \n        if (dbUser) {\n          // Ensure we have a valid role\n          const userRole = dbUser.role || 'USER';\n          \n          // Update the session user with all required fields\n          updatedSession.user = {\n            ...updatedSession.user,\n            id: dbUser.id,\n            email: dbUser.email || null,\n            name: dbUser.name || null,\n            role: userRole,\n            orgId: dbUser.org?.id || null,\n            orgName: dbUser.org?.name || null\n          };\n          \n          // Add role to token for future requests\n          token.role = userRole;\n        } else {\n          console.error('User not found in database:', token.id);\n        }\n      } catch (error) {\n        console.error('Error fetching user data in session callback:', error);\n        // Return the session with token data if DB fetch fails\n      }\n      \n      return updatedSession;\n    },\n  },\n  pages: {\n    signIn: \"/login\",\n  },\n};"],"names":[],"mappings":"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"}},
    {"offset": {"line": 346, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 351, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/AdminClient.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/components/AdminClient.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/AdminClient.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;;;;uCACe,CAAA,GAAA,+PAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0Q,GACvS,wCACA"}},
    {"offset": {"line": 360, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 365, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 370, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 375, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/admin/page.tsx"],"sourcesContent":["import { getServerSession } from \"next-auth\";\nimport { redirect } from \"next/navigation\";\nimport { authOptions } from \"@/lib/auth\";\nimport AdminClient from \"@/components/AdminClient\";\n\nexport default async function AdminPage() {\n  console.log('Rendering AdminPage...');\n  const session = await getServerSession(authOptions);\n  \n  // Debug session info\n  console.log('Admin page session:', {\n    hasSession: !!session,\n    userId: session?.user?.id,\n    userRole: session?.user?.role,\n    isAdmin: session?.user?.role === 'ADMIN'\n  });\n\n  if (!session) {\n    console.log('No session, redirecting to admin login');\n    return redirect(\"/admin/login?callbackUrl=/admin\");\n  }\n\n  if (session.user?.role !== 'ADMIN') {\n    console.log(`User with role '${session.user?.role}' is not an admin, redirecting to dashboard`);\n    return redirect(\"/dashboard\");\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 dark:bg-slate-900\">\n      <AdminClient />\n    </div>\n  );\n}"],"names":[],"mappings":";;;;;;;;;;;;;;;AAKe,eAAe;IAC5B,QAAQ,GAAG,CAAC;IACZ,MAAM,UAAU,MAAM,CAAA,GAAA,qIAAA,CAAA,mBAAgB,AAAD,EAAE,2GAAA,CAAA,cAAW;IAElD,qBAAqB;IACrB,QAAQ,GAAG,CAAC,uBAAuB;QACjC,YAAY,CAAC,CAAC;QACd,QAAQ,SAAS,MAAM;QACvB,UAAU,SAAS,MAAM;QACzB,SAAS,SAAS,MAAM,SAAS;IACnC;IAEA,IAAI,CAAC,SAAS;QACZ,QAAQ,GAAG,CAAC;QACZ,OAAO,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;IAClB;IAEA,IAAI,QAAQ,IAAI,EAAE,SAAS,SAAS;QAClC,QAAQ,GAAG,CAAC,CAAC,gBAAgB,EAAE,QAAQ,IAAI,EAAE,KAAK,2CAA2C,CAAC;QAC9F,OAAO,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;IAClB;IAEA,qBACE,wPAAC;QAAI,WAAU;kBACb,cAAA,wPAAC,0HAAA,CAAA,UAAW;;;;;;;;;;AAGlB"}},
    {"offset": {"line": 421, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 437, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/icon.svg.mjs (structured image object)"],"sourcesContent":["import src from \"IMAGE\";\nexport default { src, width: 256, height: 256 }\n"],"names":[],"mappings":";;;;;;uCACe;IAAE,KAAA,wGAAA,CAAA,UAAG;IAAE,OAAO;IAAK,QAAQ;AAAI"}},
    {"offset": {"line": 448, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 452, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/.next-internal/server/app/admin/page/actions.js"],"sourcesContent":["__turbopack_export_value__({\n});"],"names":[],"mappings":"AAAA,2BAA2B,CAC3B"}},
    {"offset": {"line": 453, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}