{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient();\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;"],"names":[],"mappings":";;;;;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,uDAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 14, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 19, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/api/trial/start/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { prisma } from \"../../../../lib/prisma\";\nimport bcrypt from \"bcryptjs\";\n\nexport const runtime = \"nodejs\";\n\nexport async function POST(request: NextRequest) {\n  try {\n    console.log(\"Trial start API called\");\n\n    if (!process.env.DATABASE_URL) {\n      console.error(\"DATABASE_URL is not set\");\n      return NextResponse.json(\n        { message: \"Server misconfiguration: DATABASE_URL is missing\" },\n        { status: 500 }\n      );\n    }\n\n    console.log(\"DATABASE_URL is set, parsing request body\");\n    const {\n      name,\n      email,\n      phone,\n      businessName,\n      city,\n      state,\n      plan = \"BASIC\",\n    } = await request.json();\n\n    console.log(\"Request body parsed:\", {\n      name,\n      email,\n      businessName,\n      city,\n      state,\n      plan,\n    });\n\n    // Check if user already exists\n    console.log(\"Checking if user exists for email:\", email);\n    const existingUser = await prisma.user.findUnique({\n      where: { email },\n    });\n\n    if (existingUser) {\n      console.log(\"User already exists:\", email);\n      return NextResponse.json(\n        { message: \"User already exists\" },\n        { status: 400 }\n      );\n    }\n\n    // Create organization first\n    console.log(\"Creating organization for:\", businessName);\n    const trialEndsAt = new Date();\n    trialEndsAt.setDate(trialEndsAt.getDate() + 30);\n\n    const org = await prisma.org.create({\n      data: {\n        name: businessName,\n        city,\n        state,\n        plan: plan as \"BASIC\" | \"PREMIUM\",\n        trialEndsAt,\n        onboardedAt: new Date(),\n      },\n    });\n    console.log(\"Organization created with ID:\", org.id);\n\n    // Create user\n    console.log(\"Creating user for:\", email);\n    const tempPassword = Math.random().toString(36).slice(-8);\n    const passwordHash = await bcrypt.hash(tempPassword, 12);\n\n    const user = await prisma.user.create({\n      data: {\n        name,\n        email,\n        passwordHash,\n        orgId: org.id,\n      },\n    });\n    console.log(\"User created with ID:\", user.id);\n\n    // Create some demo data for the new organization\n    console.log(\"Creating demo data for org:\", org.id);\n    await createDemoData(org.id);\n    console.log(\"Demo data created successfully\");\n\n    // In a real app, you'd send an email with login credentials here\n    console.log(\n      `Created account for ${email} with temp password: ${tempPassword}`\n    );\n\n    return NextResponse.json({\n      message: \"Account created successfully\",\n      orgId: org.id,\n      userId: user.id,\n      tempPassword, // Remove in production - send via email instead\n    });\n  } catch (error: any) {\n    console.error(\"Trial creation error:\", error);\n    return NextResponse.json(\n      { message: \"Internal server error\", error: error?.message ?? \"unknown\" },\n      { status: 500 }\n    );\n  }\n}\n\nasync function createDemoData(orgId: string) {\n  // Create demo leads\n  const demoLeads = [\n    {\n      name: \"Dr. Sarah Johnson\",\n      clinic: \"Wellness Chiropractic\",\n      city: \"Miami\",\n      source: \"Email Campaign\",\n      status: \"QUALIFIED\",\n    },\n    {\n      name: \"Dr. Michael Chen\",\n      clinic: \"Chen Family Practice\",\n      city: \"Tampa\",\n      source: \"LinkedIn\",\n      status: \"BOOKED\",\n    },\n    {\n      name: \"Dr. Lisa Rodriguez\",\n      clinic: \"Sunshine Med Spa\",\n      city: \"Orlando\",\n      source: \"Email Campaign\",\n      status: \"CLOSED\",\n    },\n    {\n      name: \"Dr. James Wilson\",\n      clinic: \"Wilson Chiropractic\",\n      city: \"Jacksonville\",\n      source: \"Referral\",\n      status: \"NEW\",\n    },\n    {\n      name: \"Dr. Emily Davis\",\n      clinic: \"Rejuvenate Med Spa\",\n      city: \"Fort Lauderdale\",\n      source: \"Email Campaign\",\n      status: \"SHOWED\",\n    },\n  ];\n\n  await Promise.all(\n    demoLeads.map((lead) =>\n      prisma.lead.create({\n        data: {\n          ...lead,\n          orgId,\n          status: lead.status as any,\n          lastTouch: new Date(\n            Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000\n          ), // Random date within last 7 days\n        },\n      })\n    )\n  );\n\n  // Create demo campaigns\n  const demoCampaigns = [\n    {\n      name: \"Chiro New Patient Campaign\",\n      channel: \"email\",\n      sends: 150,\n      opens: 45,\n      replies: 8,\n      replyRate: 5.3,\n    },\n    {\n      name: \"Med Spa Holiday Promo\",\n      channel: \"email\",\n      sends: 200,\n      opens: 72,\n      replies: 12,\n      replyRate: 6.0,\n    },\n    {\n      name: \"LinkedIn Outreach\",\n      channel: \"linkedin\",\n      sends: 100,\n      opens: 35,\n      replies: 4,\n      replyRate: 4.0,\n    },\n  ];\n\n  await Promise.all(\n    demoCampaigns.map((campaign) =>\n      prisma.campaign.create({\n        data: {\n          ...campaign,\n          orgId,\n        },\n      })\n    )\n  );\n\n  // Create demo KPI data for the last 30 days\n  const kpiPromises = [];\n  for (let i = 0; i < 30; i++) {\n    const date = new Date();\n    date.setDate(date.getDate() - i);\n\n    kpiPromises.push(\n      prisma.kpiDaily.create({\n        data: {\n          orgId,\n          date: date,\n          leads: Math.floor(Math.random() * 10) + 1,\n          positiveReplies: Math.floor(Math.random() * 5),\n          qualified: Math.floor(Math.random() * 3),\n          booked: Math.floor(Math.random() * 2),\n          showed: Math.floor(Math.random() * 2),\n          closed: Math.floor(Math.random() * 1),\n        },\n      })\n    );\n  }\n\n  await Promise.all(kpiPromises);\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 217, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}