{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport { getToken } from 'next-auth/jwt';\n\nexport async function middleware(request: NextRequest) {\n  const { pathname } = request.nextUrl;\n  const token = await getToken({ req: request });\n  \n  console.log('Middleware - Path:', pathname);\n  console.log('Middleware - Token:', {\n    hasToken: !!token,\n    userId: token?.sub,\n    userRole: token?.role,\n    orgId: token?.orgId\n  });\n\n  // Public routes that don't require authentication\n  // Note: handle root '/' explicitly; do NOT include '/' in startsWith array\n  const publicPaths = [\n    '/login',\n    '/register',\n    '/api/auth',\n    '/api/stripe',\n    '/api/trial',\n    '/about',\n    '/trial',\n    '/legal',\n    '/success',\n    '/cancel',\n    '/terms',\n    '/privacy',\n    '/admin/login'\n  ];\n  const isPublicPath = pathname === '/' || publicPaths.some(path => pathname.startsWith(path));\n  \n  if (isPublicPath) {\n    return NextResponse.next();\n  }\n\n  // If no token and not a public path, redirect to login\n  if (!token) {\n    console.log('No token found, redirecting to login');\n    const loginUrl = new URL('/login', request.url);\n    loginUrl.searchParams.set('callbackUrl', pathname);\n    return NextResponse.redirect(loginUrl);\n  }\n\n  // Handle admin routes\n  const isAdminPath = pathname.startsWith('/admin');\n  const isAdmin = token.role === 'ADMIN';\n  \n  if (isAdminPath && !isAdmin) {\n    console.log('Non-admin user trying to access admin area, redirecting to dashboard');\n    return NextResponse.redirect(new URL('/dashboard', request.url));\n  }\n\n  // Handle dashboard routes\n  const isDashboardPath = pathname.startsWith('/dashboard');\n  const isClient = token.role === 'CLIENT' || !token.role; // Default to client if no role\n  \n  if (isDashboardPath && !isClient) {\n    console.log('Non-client user trying to access dashboard, checking role...');\n    if (isAdmin) {\n      return NextResponse.redirect(new URL('/admin', request.url));\n    }\n  }\n\n  return NextResponse.next();\n}\n\nexport const config = {\n  matcher: [\n    '/((?!_next/static|_next/image|favicon.ico).*)',\n  ],\n};\n"],"names":[],"mappings":";;;;;;;;;;AAIO,eAAe,WAAW,OAAoB;IACnD,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,OAAO;IACpC,MAAM,QAAQ,MAAM,CAAA,GAAA,4IAAA,CAAA,WAAQ,AAAD,EAAE;QAAE,KAAK;IAAQ;IAE5C,QAAQ,GAAG,CAAC,sBAAsB;IAClC,QAAQ,GAAG,CAAC,uBAAuB;QACjC,UAAU,CAAC,CAAC;QACZ,QAAQ,OAAO;QACf,UAAU,OAAO;QACjB,OAAO,OAAO;IAChB;IAEA,kDAAkD;IAClD,2EAA2E;IAC3E,MAAM,cAAc;QAClB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACD;IACD,MAAM,eAAe,aAAa,OAAO,YAAY,IAAI,CAAC,CAAA,OAAQ,SAAS,UAAU,CAAC;IAEtF,IAAI,cAAc;QAChB,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,uDAAuD;IACvD,IAAI,CAAC,OAAO;QACV,QAAQ,GAAG,CAAC;QACZ,MAAM,WAAW,IAAI,IAAI,UAAU,QAAQ,GAAG;QAC9C,SAAS,YAAY,CAAC,GAAG,CAAC,eAAe;QACzC,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,sBAAsB;IACtB,MAAM,cAAc,SAAS,UAAU,CAAC;IACxC,MAAM,UAAU,MAAM,IAAI,KAAK;IAE/B,IAAI,eAAe,CAAC,SAAS;QAC3B,QAAQ,GAAG,CAAC;QACZ,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,QAAQ,GAAG;IAChE;IAEA,0BAA0B;IAC1B,MAAM,kBAAkB,SAAS,UAAU,CAAC;IAC5C,MAAM,WAAW,MAAM,IAAI,KAAK,YAAY,CAAC,MAAM,IAAI,EAAE,+BAA+B;IAExF,IAAI,mBAAmB,CAAC,UAAU;QAChC,QAAQ,GAAG,CAAC;QACZ,IAAI,SAAS;YACX,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,QAAQ,GAAG;QAC5D;IACF;IAEA,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;KACD;AACH"}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}